' CR1000 Series Datalogger
' Program name: VARA_302_V16.2.CR1
' Program for standalone raing gauge and associated sensors at VARA
'
' Version 11 Created on 7-15-15 FOR UPGRADE FROM CR10X DATALOGGER TO CR1000
' Version 12 Created on 11-17-2015: Added Cardout(), added NL116 with 4GB CF card. AK             
' Version 13 Created on 11-19-2015: Removed Cardout() - this command retired for >4GB cards
          ' Removed TableFile call to USB
          ' Added TableFile call to CRD
          ' TOB3 file format on CRD card for speedy writing
' Version 14 Created 1/14/2016 for upgrade to tablefile() to CRD
          ' Added "_" after _105 in "CRD:VARA_302_Table105" so CardOut is able to sort
          ' individual TOB3 files correctly.  
' Version 15 Created on 1/20/16
		  ' Modifications to heater pump subroutine (for standalone raing gauge)
		  ' 	1. removed FLAG array variable
		  '		2. Added CONT_*, OR_*, and PUMP_ON variables to public table
		  '     3. Removed hard coded pump shut off values
		  '		4. Assigned CONT_* variables default shut off values to be altered at the terminal
		  '		5. Altered pump control logic
		  '	Added CONT data table to monitor pump and pump control function
		  ' Added PROG_VERS variable to public table (output to CONT data table)
' Version 16 Created on 2/21/16 by GC
      ' Added SYS table to track non-data system variables
      ' Tracks raw distances from snow depth sensor, and tare values for SWE sensor
	  '	SYS table standardized on 3/23/16
	  ' CONT table corrections made on 3/23/16
	  ' Add decimal subversionioning: 16 is VARA program version; 1 is a unified site program version.
' Version 16.2 Created May 2016 by GC
     ' Error in VAN_232_V03.1 Logger ID. Upgrade site to Version x.2
     ' Error in VARA_302_V16.1 output of AIR450 was halted due to alias
     ' Both errors are corrected in version x.2 (VARA v16.2; VAN v3.2)

'PROGRAM VARIABLES
'////////////////////////////////////////////////////         
'Declare Constant Variable
Const LID              = 302

'Call PreserveVariables so variables will reflect last known value if the data logger experiences a power loss. 
PreserveVariables

'Declare Public Variables
Public LOGGERID
Public PROGID As Long
Public PROG_VERS=16.2
Public BATTERY_V_CHECK
Public BATTERY_V
Public PUMPVOLTS_CHECK
Public PUMPVOLTS

Public PRECIP

Public AIR_450

Public SR50(2)
Public TEMP_CORR_DISTANCE
Public SNOW_INITIAL_DISTANCE = 5.60
Public SNOWDEPTH
Public SNOWDEPTH_CHECK
Public SWE_CHECK
Public SWE
Public SNOW_TARE = 10


'Alias
Alias SR50(1)= SNOW_RAW_DIST
Alias SR50(2)= QUALITY



'Declare Public Units
Units LOGGERID        = number
Units PROGID          = number
Units PRECIP          = millimeter
Units SWE             = millimeter
Units OR_TEMP         = deg c
Units PUMPVOLTS       = volts
Units SNOWDEPTH       = meter
Units AIR_450         = deg c
Units BATTERY_V       = volts
Units SNOW_TARE       = number
Units CON_TEMP        = number

'POWER Status
'#######################################################
' Set power levels. Each level changes function
Public BATT_CHRG_FULL =  12.4
Public BATT_CHRG_LOW = 12.2
Public BATT_CHRG_VERY_LOW = 12.0
Public BATT_CHRG_EMPTY = 11.8

' Set power to peripherals
Public RADIO_PWR = True
Public RADIO_INTVL_pblc = 4
Dim RADIO_INTVL = 4*60
Public RADIO_INTVL_mult = 1
Public RADIO_INTVL_count = 1
Public RADIO_TIME_SINCE_LAST
Public PWR_AMP
Public coef_PWR_SHUNT = 100 '1 / 0.01 ohms

DataTable(PWR,true,-1)
  TableFile("CRD:VARA_302_PWR_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Minimum(1,BATTERY_V,FP2,False,False)
  Average(1,PWR_AMP,FP2,False)
  Maximum(1,PWR_AMP,FP2,False,False)
  Sample(1,RADIO_PWR,Boolean)  
  Maximum(1,RADIO_INTVL,FP2,False,False)
  Maximum(1,RADIO_INTVL_count,FP2,False,False)
  Maximum (1,RADIO_INTVL_mult,FP2,False,False)
EndTable

'CONTROL PARAMETERS
'#######################################################
'CONT Table variables
Public OR_TEMP
Public OR_RUN_TIME
Public OR_OFF_TIME
Public CON_TEMP = 4
Public CON_TIME_OFF = 900
Public CON_TIME_ON = 1209600
Public CON_TIME
Public CON_PUMP
Public PUMP_ON
Dim SA_TEMP

Alias OR_RUN_TIME = SA_RUN_TIME
Alias OR_OFF_TIME = SA_OFF_TIME

Units SA_RUN_TIME = seconds
Units SA_OFF_TIME = seconds
Units CON_TIME_OFF = seconds
Units CON_TIME_ON = seconds

Dim LogNow = false
'CONTROL TALBE- Status of pump program controls 
DataTable(CONT,LogNow=true,1200)
  TableFile("CRD:VARA_302_CONT_",64,-1,0,1,Day,0,0) 
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Sample (1,SA_TEMP,FP2)
  Sample (1,CON_TEMP,FP2)
  Sample (1,PUMP_ON,Boolean)
  Sample (1,CON_PUMP,Boolean)
  Sample (1,CON_TIME,Boolean)
  Sample (1,SA_RUN_TIME,Long)
  Sample (1,SA_OFF_TIME,Long)
  Sample (1,CON_TIME_ON,Long)
  Sample (1,CON_TIME_OFF,Long)
EndTable

'SYSTEM Diagnostics
'#######################################################
'SYS Table variables
Dim SWE_RAW
Dim SNOW_AIR_TEMP
Dim SNOW_DIST_CORRECTION

Alias TEMP_CORR_DISTANCE= SNOW_TEMP_CORR_DISTANCE
Alias SNOW_TARE = SWE_TARE

'COEF defenitions
Public coef_SA_PRECIP = 3.716
Public offset_SA_PRECIP = -184.31
Public coef_SWE = 718.76


DataTable(SYS,true,-1)
  TableFile("CRD:VARA_302_SYS_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Sample (1,SNOW_INITIAL_DISTANCE,FP2)
  Sample(1,SNOW_RAW_DIST,FP2)
  Sample(1,SNOW_DIST_CORRECTION,FP2)
  Sample(1,SNOW_TEMP_CORR_DISTANCE,FP2)  
  Sample(1,SNOW_AIR_TEMP,FP2)
  Sample(1,SWE_RAW,FP2)
  Sample(1,SWE_TARE,FP2)  
  Sample(1,coef_SA_PRECIP,FP2)
  Sample(1,offset_SA_PRECIP,FP2)
  Sample(1,coef_SWE,FP2)
EndTable

'\\\\\\\\\\\\\\\\\\\\\\\\PROGRAM OUTPUT////////////////////////
'5 MINUTE OUTPUT
DataTable(Table105,true,-1)
  TableFile("CRD:VARA_302_Table105_",64,-1,0,1,Day,0,0) 
  DataInterval(0,5,Min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PRECIP,FP2)
  Sample (1,SWE,FP2)
  Sample (1, SWE_CHECK, FP2)
  Sample (1,SNOWDEPTH,FP2)
  Sample (1, SNOWDEPTH_CHECK, FP2)
  Sample (1,QUALITY,FP2)
  Average (1,PUMPVOLTS,FP2,0)
  Sample (1, PUMPVOLTS_CHECK, FP2)
  Average (1,OR_TEMP,FP2,0)
  Average (1,AIR_450,FP2,0)
  Average (1,BATTERY_V,FP2,0)
  Sample (1, BATTERY_V_CHECK, FP2)
  Maximum (1,AIR_450,FP2,False,False)
  Minimum (1,AIR_450,FP2,False,False)
 
EndTable

'
'Main Program
'///////////////////////////////////////////////////////////////
BeginProg
  Timer(2,Sec,2)
  Scan (15,Sec,0,0)
    'PUMP CONTROL
    '#############################################################
    ' CHECK ORIFIC TEMPERATURE 
    ' pump on at low temp
    SA_TEMP = OR_TEMP
    LogNow = false
    If (OR_TEMP < CON_TEMP) Then                      
      CON_PUMP = true
    EndIf
    ' pump off at high temp
    If (CON_TEMP+1 <= OR_TEMP) Then
      CON_PUMP = false
    EndIf
    'CHECK TIME
    OR_OFF_TIME = Timer(2,sec,4)
    If (OR_OFF_TIME > CON_TIME_ON) Then
      CON_TIME = false
    EndIf
    OR_RUN_TIME = Timer(1,Sec,4)
    If (OR_RUN_TIME > CON_TIME_OFF OR CON_TIME = true) Then
      CON_PUMP = false
      CON_TIME = true
    EndIf
    ' Take action
    PortGet(PUMP_ON,8)
    If (CON_PUMP = true AND PUMP_ON = 0 ) Then
      LogNow = true
      PortSet(8,1)
      Timer(1,Sec,2)
      Timer(2,Sec,3)
    EndIf
    If (CON_PUMP = false AND PUMP_ON = 1) Then
      LogNow = true
      PortSet(8,0)
      Timer(1,Sec,3)
      Timer(2,Sec,2)
    EndIf
    '
  
    '
    'MEASURE STAND ALONE RAIN GAGE FLOAT
    VoltDiff (PRECIP,1,mV250,1,True,0,_60Hz,coef_SA_PRECIP,offset_SA_PRECIP)
    '
    'MEASURE ORIFICE TEMP
    Therm107 (OR_TEMP,1,3,Vx1,0,_60Hz,1.0,0)
    '
    'MEASURE 4.5M AIR TEMP
    Therm107 (AIR_450,1,4,Vx2,0,_60Hz,1.0,0)
    '
    'MEASURE PUMPVOLTS
    VoltDiff (PUMPVOLTS,1,mV2500,3,True,0,_60Hz,0.01,0)
    '
    'MEASURE SNOW PILLOW
    BrFull (SWE,1,mV25,4,Vx3,1,1524,True,True,0,_60Hz,coef_SWE, 0)    
    '
    'MEASURE SR50A SNOW DEPTH SENSOR
    If  TimeIntoInterval(0,300,Sec) Then   
        SDI12Recorder (SR50(),1,0,"M1!",1.0,0)
        SNOW_AIR_TEMP = AIR_450
        SNOW_DIST_CORRECTION=(SQR((SNOW_AIR_TEMP+273.15)/273.15))
    EndIf
    '
    'MEASURE BATTERY VOLTAGE
    Battery(BATTERY_V)
    '
    'PROCESS DATA   
    '
    'CORRECT SNOW DEPTH MEASUREMENT
    TEMP_CORR_DISTANCE=SNOW_RAW_DIST*SNOW_DIST_CORRECTION
    SNOWDEPTH=SNOW_INITIAL_DISTANCE-TEMP_CORR_DISTANCE
    '
    'SUBTRACT TARE FOR SNOW PILLOW
    SWE_RAW = SWE
    SWE = SWE - SNOW_TARE
	
	' POWER CONTROLS
	  '##########################################################
	  'Reset telemetry counter at midnight
	  If TimeIntoInterval(0,24,Hr) Then
		  RADIO_INTVL_count = 0
		  RADIO_INTVL = RADIO_INTVL_pblc*60
	  EndIf
	  
	  If BATTERY_V > BATT_CHRG_FULL Then
		  RADIO_INTVL_mult =  1
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_FULL  AND BATTERY_V> BATT_CHRG_LOW Then
		  RADIO_INTVL_mult = 2 
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_LOW  AND BATTERY_V> BATT_CHRG_VERY_LOW Then
		  RADIO_INTVL_mult = 3
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_VERY_LOW  AND BATTERY_V> BATT_CHRG_EMPTY Then
		  'If battery is very low, the radio will only transmit at 1600 (the counter 
		  'is reset every night) 
	    RADIO_INTVL = 16*60
		  RADIO_INTVL_mult = 1
		  RADIO_INTVL_count = 0
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_EMPTY	
		  RADIO_PWR = False
	  EndIf
		
	  If TimeIsBetween(0,10,RADIO_INTVL, min) Then
		  RADIO_INTVL_count += 1
		  If RADIO_INTVL_count >= RADIO_INTVL_mult Then
        SW12(RADIO_PWR)		 
        EthernetPower(RADIO_PWR) 
        RADIO_INTVL_count = 0
        Timer (3,Min,2)
		  EndIf
	  Else
		  ' Turn off radio the rest of the time
		  SW12(False)
		  EthernetPower(False)
		  RADIO_TIME_SINCE_LAST = Timer(3,min,4)
	  EndIf
	  
    '
    'OUTPUT DATA
    '
    'SET LOGGERID TO 302
    LOGGERID = LID
    '
    'RECORD THE SIGNATURE AS PROGID
    If TimeIntoInterval(0,1,Min) Then
      PROGID=Status.ProgSignature(1,1)
    EndIf
	
	If TimeIntoInterval(0,5,Min)
		BATTERY_V_CHECK = NAN
		PUMPVOLTS_CHECK = NAN
		SNOWDEPTH_CHECK = NAN
		SWE_CHECK = NAN
	EndIf
    '
    '5 MINUTE OUTPUT
    CallTable Table105
    CallTable CONT
    CallTable SYS
    CallTable PWR
  NextScan
EndProg


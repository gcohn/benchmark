'CR1000 Series Datalogger
'Program name: CENT_234_V05.CR1
'
'Version 1 Created on 4-22-15 By JM & AK
'
'Version 2 Modified on 4-27-15 JM
'  Removed Units QUALITY = number.  QUALITY numbers have no units of measure.
'
'Version 3 Modified on 4-28-15 JM
'  Changed Snow Depth Sensor instruction from "M!" to "M1!".
'
'Version 4 Created 1/14/2016 AK
'  Changed TableFile("USB:CENT_234_Table105",8,-1,0,0,Hr,0,0) to TableFile("CRD:CENT_234_Table105_",64,-1,0,1,Day,0,0)
'  Update OS to 28 and added NL116 with 4GB storage card.
'Version 5 Created 3/10/2016 GC
'  Updated standalone pump controls to fix bug
'  Added CONT table to track pump controls
'  Added SYS table to track raw SNOW_DEPTH, SWE tare, and other coefficients
'

'PROGRAM VARIABLES
'////////////////////////////////////////////////////
'Declare Constant Variable
Const LID              = 234

'Call PreserveVariables so variables will reflect last known value if the data logger experiences a power loss. 
PreserveVariables

'Declare Public Variables
Public LOGGERID
Public PROGID As Long
Public PROG_VERS=5
Public REF_TEMP
Public BATTERY_V_CHECK
Public BATTERY_V
Public PUMPVOLTS_CHECK
Public PUMPVOLTS

Public SA_PRECIP
Public SH_PRECIP
Public SH_TEMP

Public SR50(2)
Public TEMP_CORR_DISTANCE
Public SNOW_INITIAL_DISTANCE = 3.35
Public AIR_TEMP
Public SNOWDEPTH_CHECK
Public SNOWDEPTH
Public SWE_CHECK
Public SWE
Public SNOW_TARE

Public TIPPING_B
Public TOTAL_TIPS

Public PAR
Public SOLAR_Wm2
Public SOLAR_MJ
Public SOLARMULT

Public SNOW_diag=1 '1 = snow present; 0=snow absent


'Alias
Alias SR50(1)= SNOW_RAW_DIST
Alias SR50(2)= QUALITY

'Declare Public Units
Units LOGGERID        = number
Units PROGID          = number
Units SA_PRECIP       = millimeter
Units SH_PRECIP       = millimeter
Units SWE             = millimeter
Units TIPPING_B       = tips
Units TOTAL_TIPS      = tips
Units SNOWDEPTH       = meter
Units SA_TEMP         = deg c
Units SH_TEMP         = deg c
Units BATTERY_V       = volts
Units PAR             = umol photons/m2/sec
Units SOLAR_Wm2       = w m-2
Units SOLAR_MJ        = MJ
Units SOLARMULT       = number
Units SNOW_TARE       = number
Units CON_TEMP        = number


'CONTROL PARAMETERS
'#######################################################
'CONT Table variables
Public SA_TEMP
Public SA_RUN_TIME
Public SA_OFF_TIME
Public CON_TEMP = 4
Public CON_TIME_OFF = 900
Public CON_TIME_ON = 1209600
Public CON_TIME
Public CON_PUMP
Public PUMP_ON

Units SA_RUN_TIME = seconds
Units SA_OFF_TIME = seconds
Units CON_TIME_OFF = seconds
Units CON_TIME_ON = seconds

Dim LogNow = false

'CONTROL TALBE- Status of pump program controls 
DataTable(CONT,LogNow=true,-1)
  TableFile("CRD:CENT_234_CONT_",64,-1,0,1,Day,0,0) 
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Sample (1,SA_TEMP,FP2)
  Sample (1,CON_TEMP,FP2)
  Sample (1,PUMP_ON,Boolean)
  Sample (1,CON_PUMP,Boolean)
  Sample (1,CON_TIME,Boolean)
  Sample (1,SA_RUN_TIME,Long)
  Sample (1,SA_OFF_TIME,Long)
  Sample (1,CON_TIME_ON,Long)
  Sample (1,CON_TIME_OFF,Long)
EndTable

'SYSTEM Diagnostics
'#######################################################
'SYS Table variables
Dim SNOW_DIST_CORRECTION
Dim SNOW_AIR_TEMP
Dim SWE_RAW
Dim SOLAR_Wm2_RAW

Alias TEMP_CORR_DISTANCE= SNOW_TEMP_CORR_DISTANCE
Alias SNOW_TARE = SWE_TARE

'COEF defenitions
Public coef_SOLAR_Wm2 = 98.4834
Public coef_PAR = 280.9
Public coef_SA_PRECIP = 3.716
Public offset_SA_PRECIP = -184.31
Public coef_SH_PRECIP = 4.7880
Public offset_SH_PRECIP = -237.48
Public coef_SWE = 718.76


DataTable(SYS,true,-1)
  TableFile("CRD:CENT_234_SYS_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Sample (1,SNOW_INITIAL_DISTANCE,FP2)
  Sample(1,SNOW_RAW_DIST,FP2)
  Sample(1,SNOW_DIST_CORRECTION,FP2)
  Sample(1,SNOW_TEMP_CORR_DISTANCE,FP2)  
  Sample(1,SNOW_AIR_TEMP,FP2)
  Sample(1,SWE_RAW,FP2)
  Sample(1,SWE_TARE,FP2)  
  Minimum(1, SOLAR_Wm2_RAW,FP2,False,0)
  Sample(1,coef_SOLAR_Wm2,FP2)
  Sample(1,coef_PAR,FP2)
  Sample(1,coef_SA_PRECIP,FP2)
  Sample(1,offset_SA_PRECIP,FP2)
  Sample(1,coef_SH_PRECIP,FP2)
  Sample(1,offset_SH_PRECIP,FP2)
  Sample(1,coef_SWE,FP2)
EndTable

'\\\\\\\\\\\\\\\\\\\\\\\\PROGRAM OUTPUT////////////////////////

'5 MINUTE OUTPUT
DataTable(Table105,true,-1)
  TableFile("CRD:CENT_234_Table105_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,Min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,SA_PRECIP,FP2)
  Sample (1,SH_PRECIP,FP2)
  Sample (1,SWE,FP2)
  Sample (1, SWE_CHECK, FP2)
  Sample (1,SNOWDEPTH,FP2)
  Sample (1, SNOWDEPTH_CHECK, FP2)
  Sample (1,QUALITY,FP2)
  Totalize (1,TIPPING_B,FP2,0)
  Average (1,SA_TEMP,FP2,0)
  Average (1,SH_TEMP,FP2,0)
  Average (1,BATTERY_V,FP2,0)
  Sample (1, BATTERY_V_CHECK, FP2)
  Average (1,PUMPVOLTS,FP2,0)
  Sample (1, PUMPVOLTS_CHECK, FP2)
  Average (1,PAR,FP2,0)
  Average (1,SOLAR_Wm2,FP2,0)
  Maximum (1,PAR,FP2,False,0)
  Maximum (1,SOLAR_Wm2,FP2,False,0)
EndTable

'
'Main Program
'///////////////////////////////////////////////////////////////
BeginProg  
  Timer(2,Sec,2)
  Scan (15,Sec,0,0)    
    'PUMP CONTROL
    '#############################################################
    ' CHECK ORIFIC TEMPERATURE 
    ' pump on at low temp
    LogNow = false
    If (SA_TEMP < CON_TEMP) Then                      
      CON_PUMP = true
    EndIf
    ' pump off at high temp
    If (CON_TEMP+1 <= SA_TEMP) Then
      CON_PUMP = false
    EndIf
    'CHECK TIME
    SA_OFF_TIME = Timer(2,sec,4)
    If (SA_OFF_TIME > CON_TIME_ON) Then
      CON_TIME = false
    EndIf
    SA_RUN_TIME = Timer(1,Sec,4)
    If (SA_RUN_TIME > CON_TIME_OFF OR CON_TIME = true) Then
      CON_PUMP = false
      CON_TIME = true
    EndIf
    ' Take action
    PortGet(PUMP_ON,8)
    If (CON_PUMP = true AND PUMP_ON = 0 ) Then      
      LogNow = true
      PortSet(8,1)
      Timer(1,Sec,2)
      Timer(2,Sec,3)
    EndIf
    If (CON_PUMP = false AND PUMP_ON = 1) Then
      LogNow = true
      PortSet(8,0)
      Timer(1,Sec,3)
      Timer(2,Sec,2)     
    EndIf
    
    
    '

    'MEASURE PYRANOMETER
    VoltDiff (SOLAR_Wm2,1,mV25,1,True,0,_60Hz,coef_SOLAR_Wm2 ,0)
    '
    'MEASURE PAR
    VoltDiff (PAR,1,mV25,2,True,0,_60Hz,coef_PAR,0)
    '
    'MEASURE STAND ALONE RAIN GAGE FLOAT
    VoltDiff (SA_PRECIP,1,mV250,3,True,0,_60Hz,coef_SA_PRECIP,offset_SA_PRECIP)
    '
    'MEASURE SHELTER RAIN GAGE FLOAT
    VoltDiff (SH_PRECIP,1,mV250,4,True,0,_60Hz,coef_SH_PRECIP,offset_SH_PRECIP)
    '
    'MEASURE SNOW PILLOW
    BrFull (SWE,1,mV25,5,Vx1,1,1524,True,True,0,_60Hz,coef_SWE, 0)
    '
    'MEASURE TIPPING BUCKET LYSIMETER
    PulseCount (TIPPING_B,1,1,2,0,1.0,0)
    '
    'MEASURE SR50A SNOW DEPTH SENSOR
    SDI12Recorder (SR50(),3,0,"M1!",1.0,0)
    '
    'MEASURE STAND ALONE RAINGAGE ORIFICE TEMP
    Therm107 (SA_TEMP,1,11,Vx2,0,_60Hz,1.0,0)
    '
    'MEASURE SHELTER RAINGAGE ORIFICE TEMP
    Therm107 (SH_TEMP,1,12,Vx2,0,_60Hz,1.0,0)
    '
    'MEASURE AIR TEMP
    Therm107 (AIR_TEMP,1,13,Vx2,0,_60Hz,1.0,0)
    '
    'MEASURE BATTERY VOLTAGE
    Battery(BATTERY_V)
    '
    'PROCESS DATA
    '
    'SET SOLAR RADIATION TO ZERO IF LESS THAN ZERO
    SOLAR_Wm2_RAW = SOLAR_Wm2
    If (SOLAR_Wm2 < 0) Then
      SOLAR_Wm2 = 0
    EndIf
    '
    'COMPUTE MEJAJOULES FOR 15 SECOND PERIOD
    SOLARMULT = 1.5E-5
    SOLAR_MJ = SOLAR_Wm2 * SOLARMULT
    '
    'CORRECT SNOW DEPTH MEASUREMENT
    SNOW_DIST_CORRECTION=(SQR((AIR_TEMP+273.15)/273.15))
    TEMP_CORR_DISTANCE=SNOW_RAW_DIST*SNOW_DIST_CORRECTION
    SNOWDEPTH=SNOW_INITIAL_DISTANCE-TEMP_CORR_DISTANCE
    '
    'SUBTRACT TARE FOR SNOW PILLOW
    SWE_RAW =  SWE
    SWE = SWE - SNOW_TARE
    '
    'COMPUTE TOTAL TIPS
    TOTAL_TIPS = TOTAL_TIPS + TIPPING_B
    '
    'OUTPUT DATA
    '
    'SET LOGGERID TO 234
    LOGGERID = LID
    '
    'RECORD THE SIGNATURE AS PROGID
    If TimeIntoInterval(0,1,Min) Then
      PROGID=Status.ProgSignature(1,1)
    EndIf
    
    If TimeIntoInterval(0,5,Min)
      BATTERY_V_CHECK = NAN
      PUMPVOLTS_CHECK = NAN
      SNOWDEPTH_CHECK = NAN
      SWE_CHECK = NAN
    EndIf
    '
    '5 MINUTE OUTPUT
    CallTable Table105
    CallTable CONT
    CallTable SYS
  NextScan
EndProg


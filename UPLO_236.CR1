' CR1000 Series Datalogger
' Program name: UPLO_236_V08.1.CR1
'
' Version 1 Created on 9-15-15 by JM
' Version 2 Modified on 11-23-15 by JM,SW & AK
	' Changed control port for snowdepth sensor from 3 to 1.  Removed MJ 
    ' Removed CardOut() - this command expired for CF cards over 4GB
    ' Added TableFile() command to save data in TOB3 format on CRD.
    ' Removed TableFile() to USB becuase only one TableFile() call permitted per table.
' Version 3 Created on 1/14/2016 by AK
	' Changed TableFile("CRD:UPLO_236_Table105",64,-1,0,1,Day,0,0) to 
	' TableFile("CRD:UPLO_236_Table105_",64,-1,0,1,Day,0,0)
' Version 4 created on 2/3/16 by GC
	' added SYS table output to card to track system function separate from climate data
' Version 5 created on 2/29/16 by GC
	' Fixed output variable assignment and standardized naming
' Version 6 Create 3/23/16 by GC
	' Standardize formatting with other benchmark Met stations
	' Add calibration coefficients and offsets to SYS table
' Version 7 Created 5/25/16 by GC
  ' Added panel temp to verify logger function
  ' AK renamed output file name
  ' Changed order of Public Table
' Version 8 Created October 2016 by GC
  ' Created Check variables in 105 table for snow measurements
  ' For truncated measurements, stored raw values in SYS table (SOLAR and RH)
  ' Added PreservedVariables command to restart logger from last known settings
  ' Fixed table memory allocation for CONT table
  ' Added automated power saving protocol to shut off radio and ASP during low power
  ' Added advanced power tracking
  ' Standardazed public table display for easier reading of program and keypad.
' Version 8.1 debug October 2016 by GC
  ' Fixed compile error and added check values to Table105

'PROGRAM VARIABLES
'////////////////////////////////////////////////////
'Declare Constant Variable
Const LID              = 236

'Call PreserveVariables so variables will reflect last known value if the data logger experiences a power loss. 
PreserveVariables

'Declare Public Variables
Public LOGGERID
Public PROGID As Long
Public PROG_VERS = 8.1
Public BATTERY_V_CHECK = NAN
Public BATTERY_V
Public REF_TEMP

Public SH_PRECIP
Public SH_TEMP

Public SR50(2)
Public TEMP_CORR_DISTANCE
Public SNOW_INITIAL_DISTANCE = 5.6
Public AIR_TEMP
Public SNOWDEPTH_CHECK = NAN
Public SNOWDEPTH
Public SWE_CHECK = NAN
Public CS451(2)
Public SNOW_TARE

Public TIPPING_B
Public TOTAL_TIPS

Public SOLAR_Wm2

Public BP_mb

Public SNOW_diag=1 '1 = snow present; 0=snow absent

'Alias
Alias SR50(1)= SNOW_RAW_DIST
Alias SR50(2)  = QUALITY
Alias CS451(1) = SWE
Alias CS451(2) = TEMP_C

'Declare Public Units
Units LOGGERID        = number
Units PROGID          = number
Units SH_PRECIP       = millimeter
Units SH_TEMP         = deg c
Units SWE             = millimeter
Units TIPPING_B       = tips
Units TOTAL_TIPS      = tips
Units SNOWDEPTH       = meter
Units AIR_TEMP        = deg C
Units BATTERY_V       = volts
Units SOLAR_Wm2       = w m-2
Units SNOW_TARE       = number
Units BP_mb           = mb

'POWER Status
'#######################################################
' Set power levels. Each level changes function
Public BATT_CHRG_FULL =  12.4
Public BATT_CHRG_LOW = 12.2
Public BATT_CHRG_VERY_LOW = 12.0
Public BATT_CHRG_EMPTY = 11.8

' Set power to peripherals
Public RADIO_PWR = True
Public RADIO_INTVL_pblc = 4 'Hours
Dim RADIO_INTVL = 4*60
Public RADIO_INTVL_mult = 1
Public RADIO_INTVL_count = 1
Public RADIO_TIME_SINCE_LAST
Public RADIO_DURATION_strt = 25 'Minutes
Public RADIO_DURATION_end = 38 'Minutes
Public PWR_AMP
Public coef_PWR_SHUNT = 100 '1 / 0.01 ohms

DataTable(PWR,true,-1)
  TableFile("CRD:UPLO_236_PWR_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Minimum(1,BATTERY_V,FP2,False,False)
  Average(1,PWR_AMP,FP2,False)
  Maximum(1,PWR_AMP,FP2,False,False)
  Sample(1,RADIO_PWR,Boolean) 
  Maximum(1,RADIO_TIME_SINCE_LAST,FP2,False,False) 
  Maximum(1,RADIO_INTVL,FP2,False,False)
  Maximum(1,RADIO_INTVL_count,FP2,False,False)
  Maximum (1,RADIO_INTVL_mult,FP2,False,False)
  Sample(1,RADIO_DURATION_strt, FP2)
  Sample(1,RADIO_DURATION_end, FP2)
  Sample(1,BATT_CHRG_FULL,FP2)
  Sample(1,BATT_CHRG_LOW,FP2)
  Sample(1,BATT_CHRG_VERY_LOW,FP2)
  Sample(1,BATT_CHRG_EMPTY,FP2)
EndTable

'SYSTEM Diagnostics
'#######################################################
'SYS Table variables
Dim SNOW_DIST_CORRECTION
Dim SNOW_AIR_TEMP
Dim SWE_RAW
Dim SOLAR_Wm2_RAW

Alias TEMP_CORR_DISTANCE= SNOW_TEMP_CORR_DISTANCE
Alias SNOW_TARE = SWE_TARE

'COEF defenitions
Public coef_SOLAR_Wm2 = 91.6758
Public coef_SH_PRECIP = 4.7880
Public offset_SH_PRECIP = -237.48
Public coef_BP_mb = 0.24
Public offset_BP_mb = 646.1
Public coef_SWE = 703.07

DataTable(SYS,true,-1)
  TableFile("CRD:UPLO_236_SYS_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,Min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,PROG_VERS,FP2)
  Sample (1,SNOW_INITIAL_DISTANCE,FP2)
  Sample(1,SNOW_RAW_DIST,FP2)
  Sample(1,SNOW_DIST_CORRECTION,FP2)
  Sample(1,SNOW_TEMP_CORR_DISTANCE,FP2)  
  Sample(1,SNOW_AIR_TEMP,FP2)
  Sample(1,SWE_RAW,FP2)
  Sample(1,SWE_TARE,FP2)
  Minimum(1, SOLAR_Wm2_RAW,FP2,False,0)
  Sample(1,coef_SOLAR_Wm2,FP2)
  Sample(1,coef_SH_PRECIP,FP2)
  Sample(1,offset_SH_PRECIP,FP2)
  Sample(1,coef_BP_mb,FP2)
  Sample(1,offset_BP_mb,FP2)  
  Sample(1,coef_SWE,FP2)
EndTable
  
'\\\\\\\\\\\\\\\\\\\\\\\\PROGRAM OUTPUT////////////////////////

'5 MINUTE OUTPUT
DataTable(Table105,true,-1)
  TableFile("CRD:UPLO_236_Table105_",64,-1,0,1,Day,0,0)
  DataInterval(0,5,Min,10)
  Sample (1,LOGGERID,FP2)
  Sample (1,PROGID,Long)
  Sample (1,SH_PRECIP,FP2)
  Sample (1,SWE,FP2)
  Sample (1, SWE_CHECK, FP2)
  Sample (1,SNOWDEPTH,FP2)
  Sample (1, SNOWDEPTH_CHECK, FP2)
  Sample (1,QUALITY,FP2)
  Sample (1,BP_mb,IEEE4)
  Totalize (1,TIPPING_B,FP2,0)
  Average (1,SH_TEMP,FP2,0)
  Average (1,SOLAR_Wm2,FP2,0)
  Average (1,BATTERY_V,FP2,0) 
  Sample (1, BATTERY_V_CHECK, FP2)
  Maximum (1,SOLAR_Wm2,FP2,False,0)
  
EndTable

  
'
'Main Program
'///////////////////////////////////////////////////////////////
BeginProg
  Scan (15,Sec,0,0)
    '   
    'MEASURE SHELTER RAIN GAGE FLOAT
    VoltDiff (SH_PRECIP,1,mV250,1,True,0,_60Hz,coef_SH_PRECIP,offset_SH_PRECIP)
    '
    'MEASURE PYRANOMETER
    VoltDiff (SOLAR_Wm2,1,mV25,2,True,0,_60Hz,coef_SOLAR_Wm2,0)
    '
    'MEASURE SHELTER RAINGAGE ORIFICE TEMP
    Therm107 (SH_TEMP,1,5,Vx2,0,_60Hz,1.0,0)
    '
    'MEASURE AIR TEMP
    Therm107 (AIR_TEMP,1,6,Vx2,0,_60Hz,1.0,0)
    '
    'MEASURE SNOW PILLOW
    SDI12Recorder(CS451,7,"0","M!",1,0)
    '
    'MEASURE TIPPING BUCKET LYSIMETER
    PulseCount (TIPPING_B,1,1,2,0,1.0,0)
    '
    'MEASURE SR50A SNOW DEPTH SENSOR
    If  TimeIntoInterval(0,300,Sec) Then   
        SDI12Recorder (SR50(),1,0,"M1!",1.0,0)
        SNOW_AIR_TEMP = AIR_TEMP
        SNOW_DIST_CORRECTION=(SQR((SNOW_AIR_TEMP+273.15)/273.15))
    EndIf
        
    '
    'MEASURE BAROMETRIC PRESSURE EVERY 5 MINUTES AND CORRECT TO SEA LEVEL
    If TimeIntoInterval(4,5,Min) Then PortSet(5,1)    
    If TimeIntoInterval(0,5,Min) Then
      VoltSe(BP_mb,1,mV5000,9,False,0,_60Hz,coef_BP_mb,offset_BP_mb)
      PortSet(5,0)
    EndIf
    '
    'MEASURE BATTERY VOLTAGE
    Battery(BATTERY_V)
    '
    'MEASURE PANEL TEMP
    PanelTemp(REF_TEMP,_60Hz)
    '
    'MEASURE CURRENT FROM SHUNT
	   VoltDiff (PWR_AMP,1,mV5000,8,True ,0,250,coef_PWR_SHUNT,0)
	   '
    'PROCESS DATA
    '
    'SET SOLAR RADIATION TO ZERO IF LESS THAN ZERO
    SOLAR_Wm2_RAW = SOLAR_Wm2
    If (SOLAR_Wm2 < 0) Then
      SOLAR_Wm2 = 0
    EndIf
    '
    'CORRECT SNOW DEPTH MEASUREMENT
    TEMP_CORR_DISTANCE=SNOW_RAW_DIST*SNOW_DIST_CORRECTION
    SNOWDEPTH=SNOW_INITIAL_DISTANCE-TEMP_CORR_DISTANCE
    '
    'CHANGE SNOW PILLOW OUTPUT FROM PSIG TO mm H2O
	  SWE_RAW = SWE
    SWE = SWE * coef_SWE
    '
    'SUBTRACT TARE FOR SNOW PILLOW
    SWE = SWE - SNOW_TARE
    '
    'COMPUTE TOTAL TIPS
    TOTAL_TIPS = TOTAL_TIPS + TIPPING_B
    
    ' POWER CONTROLS
	  '##########################################################
	  'Reset telemetry counter at midnight
	  If TimeIntoInterval(0,24,Hr) Then
		  RADIO_INTVL_count = 0
		  RADIO_INTVL = RADIO_INTVL_pblc*60
	  EndIf
	  
	  If BATTERY_V > BATT_CHRG_FULL Then
	  	RADIO_INTVL_mult =  1
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_FULL  AND BATTERY_V> BATT_CHRG_LOW Then
		  RADIO_INTVL_mult = 2 
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_LOW  AND BATTERY_V> BATT_CHRG_VERY_LOW Then
		  RADIO_INTVL_mult = 3
		  RADIO_PWR = True
		
	  ElseIf BATTERY_V <= BATT_CHRG_VERY_LOW  AND BATTERY_V> BATT_CHRG_EMPTY Then
		  'If battery is very low, the radio will only transmit at 1600 (the counter 
		  'is reset every night) 
      RADIO_INTVL = 16*60
		  RADIO_INTVL_mult = 1
		  RADIO_INTVL_count = 0
		  RADIO_PWR = True
		
 	  ElseIf BATTERY_V <= BATT_CHRG_EMPTY	
		  RADIO_PWR = False
	  EndIf
		 
	  If TimeIsBetween(RADIO_DURATION_strt,RADIO_DURATION_end,RADIO_INTVL,min) Then
		  RADIO_INTVL_count += 1
		  If RADIO_INTVL_count >= RADIO_INTVL_mult Then
			  EthernetPower(RADIO_PWR)
		    RADIO_INTVL_count = 0
			Timer (3,Sec,2)
		  EndIf
	  Else
		  ' Turn off radio the rest of the time
		  EthernetPower(False)
		  RADIO_TIME_SINCE_LAST = Timer(3,Sec,4)
	  EndIf
	  
    '
    'OUTPUT DATA
    '
    'SET LOGGERID TO 234
    LOGGERID = LID
    '
    'RECORD THE SIGNATURE AS PROGID
    If TimeIntoInterval(0,1,Min) Then
      PROGID=Status.ProgSignature(1,1)
    EndIf
    If TimeIntoInterval(0,5,Min)
      BATTERY_V_CHECK = NAN
      SNOWDEPTH_CHECK = NAN
      SWE_CHECK = NAN
    EndIf
    '
    '5 MINUTE OUTPUT
    CallTable Table105
    CallTable SYS
    CallTable PWR
  NextScan
EndProg

